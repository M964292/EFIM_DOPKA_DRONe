# app.py

from flask import Flask, request, render_template_string, redirect, url_for
import random
import os # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PORT

# --- –ö–ª–∞—Å—Å –∏–≥—Ä—ã (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ –º–µ—Ç–æ–¥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è) ---
class FPVQuizGame:
    def __init__(self):
        self.score = 0
        self.questions_answered = 0
        self.components_learned = set()
        self.transfer_code = ""

        # --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        self.components = {
            "–§—Ä–µ–π–º (—Ä–∞–º–∞)": {
                "description": '–û—Å–Ω–æ–≤–∞ –¥—Ä–æ–Ω–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –∫—Ä–µ–ø—è—Ç—Å—è –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã. –ë—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ (3", 5" –∏ —Ç.–¥.)',
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ ‚îÇ
          ‚îÇ X ‚îÇ
          ‚îÇ ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
        –ö–∞—Ä–±–æ–Ω–æ–≤–∞—è —Ä–∞–º–∞
                """,
                "function": "–°–ª—É–∂–∏—Ç –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥—Ä–æ–Ω–∞. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ä–∞–∑–º–µ—Ä, –ø—Ä–æ—á–Ω–æ—Å—Ç—å –∏ –∞—ç—Ä–æ–¥–∏–Ω–∞–º–∏–∫—É.",
                "facts": [
                    "–ú–∞—Ç–µ—Ä–∏–∞–ª: —É–≥–ª–µ—Ä–æ–¥–Ω–æ–µ –≤–æ–ª–æ–∫–Ω–æ (–∫–∞—Ä–±–æ–Ω)",
                    "–†–∞–∑–º–µ—Ä –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ –¥—é–π–º–∞—Ö –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏",
                    "–§–æ—Ä–º–∞: X, H, –∫—Ä–µ—Å—Ç, –≥–∏–±—Ä–∏–¥",
                    "–í–µ—Å —Ä–∞–º—ã –≤–ª–∏—è–µ—Ç –Ω–∞ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥—Ä–æ–Ω–∞",
                ],
            },
            "–ú–æ—Ç–æ—Ä": {
                "description": "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã. –ò–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ kV (–æ–±–æ—Ä–æ—Ç—ã –Ω–∞ –≤–æ–ª—å—Ç)",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ üß≤üß≤üß≤ ‚îÇ
          ‚îÇ üß≤ üß≤ ‚îÇ
                  üß≤üß≤üß≤ ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          –ë–µ—Å–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–Ω—ã–π –º–æ—Ç–æ—Ä
                """,
                "function": "–í—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã, —Å–æ–∑–¥–∞–≤–∞—è –ø–æ–¥—ä–µ–º–Ω—É—é —Å–∏–ª—É. –ß–µ–º –≤—ã—à–µ kV - —Ç–µ–º –≤—ã—à–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è.",
                "facts": [
                    "–¢–∏–ø: –±–µ—Å–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–Ω—ã–π (BLDC)",
                    "–ë—ã–≤–∞—é—Ç —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤: 2207, 2306 –∏ —Ç.–¥.",
                    "–ß–µ–º –≤—ã—à–µ kV - —Ç–µ–º –≤—ã—à–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—é—Å–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã",
                ],
            },
            "–ü—Ä–æ–ø–µ–ª–ª–µ—Ä (–ø—Ä–æ–ø)": {
                "description": "–õ–æ–ø–∞—Å—Ç–∏, —Å–æ–∑–¥–∞—é—â–∏–µ –ø–æ–¥—ä–µ–º–Ω—É—é —Å–∏–ª—É. –ò–º–µ—é—Ç —Ä–∞–∑–Ω—ã–π —à–∞–≥ –∏ –¥–∏–∞–º–µ—Ç—Ä",
                "image": """
           /\\
          / \\
         / \\
        /______\\
          –ü—Ä–æ–ø–µ–ª–ª–µ—Ä
                """,
                "function": "–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—ä–µ–º–Ω—É—é —Å–∏–ª—É –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏. –†–∞–∑–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç—è–≥—É –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞.",
                "facts": [
                    "–ú–∞—Ç–µ—Ä–∏–∞–ª: –ø–ª–∞—Å—Ç–∏–∫, –Ω–µ–π–ª–æ–Ω, –∫–∞—Ä–±–æ–Ω",
                    '–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞: 5x4.3 (5" –¥–∏–∞–º–µ—Ç—Ä, 4.3" —à–∞–≥)',
                    "–ë—ã–≤–∞—é—Ç 2, 3, 4, 5 –∏ –±–æ–ª–µ–µ –ª–æ–ø–∞—Å—Ç–µ–π",
                    "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–ø–µ–ª–ª–µ—Ä–æ–≤ –≤–∞–∂–Ω–∞ –¥–ª—è –≤–∏–±—Ä–∞—Ü–∏–π",
                ],
            },
            "–†–µ–≥—É–ª—è—Ç–æ—Ä —Ö–æ–¥–∞ (ESC)": {
                "description": "–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å—é –º–æ—Ç–æ—Ä–æ–≤. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–∏–≥–Ω–∞–ª —Å –ø–æ–ª–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ ESC ‚îÇ
          ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
          ‚îÇ ‚îÇ ‚îÇ ‚îÇ
          ‚îî‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îò
          4-in-1 —Ä–µ–≥—É–ª—è—Ç–æ—Ä
                """,
                "function": "–£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å—é –≤—Ä–∞—â–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–ª–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.",
                "facts": [
                    "–ë—ã–≤–∞—é—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏ 4-in-1",
                    "–ò–∑–º–µ—Ä—è—é—Ç—Å—è –≤ –∞–º–ø–µ—Ä–∞—Ö (A): 30A, 45A, 60A",
                    "–ü—Ä–æ—à–∏–≤–∫–∞: BLHeli, Bluejay, KISS",
                    "–ß–∞—Å—Ç–æ—Ç–∞ –®–ò–ú –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –º–æ—Ç–æ—Ä–æ–≤",
                ],
            },
            "–ü–æ–ª–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä (FC)": {
                "description": "–ú–æ–∑–≥ –¥—Ä–æ–Ω–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–æ—Ä–∞–º–∏",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ FC ‚îÇ
          ‚îÇ üéØ üéØ üéØ ‚îÇ
          ‚îÇ üéØ üéØ üéØ ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         –ü–æ–ª–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                """,
                "function": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤ –∏ –ø—É–ª—å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –¥—Ä–æ–Ω –≤ –ø–æ–ª–µ—Ç–µ.",
                "facts": [
                    "–ü—Ä–æ—à–∏–≤–∫–∞: Betaflight, Emuflight, KISS",
                    "–ò–º–µ–µ—Ç –≥–∏—Ä–æ—Å–∫–æ–ø –∏ –∞–∫—Å–µ–ª–µ—Ä–æ–º–µ—Ç—Ä",
                    "–†–∞–∑—ä–µ–º—ã: UART, I2C, PWM",
                    "–ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏",
                ],
            },
            "–ö–∞–º–µ—Ä–∞ FPV": {
                "description": "–ü–µ—Ä–µ–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –¥—Ä–æ–Ω–∞ –Ω–∞ —à–ª–µ–º. –ò–º–µ–µ—Ç —à–∏—Ä–æ–∫–∏–π —É–≥–æ–ª –æ–±–∑–æ—Ä–∞",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ ___ ‚îÇ
          ‚îÇ / \\ ‚îÇ
          ‚îÇ \\___/ ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          FPV –∫–∞–º–µ—Ä–∞
                """,
                "function": "–ü–µ—Ä–µ–¥–∞–µ—Ç –≤–∏–¥–µ–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ FPV —à–ª–µ–º –ø–∏–ª–æ—Ç–∞, —Å–æ–∑–¥–∞–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–ª–µ—Ç–∞ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.",
                "facts": [
                    "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: TVL (–∞–Ω–∞–ª–æ–≥) –∏–ª–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–µ",
                    "–£–≥–æ–ª –æ–±–∑–æ—Ä–∞: 120-180 –≥—Ä–∞–¥—É—Å–æ–≤",
                    "–§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä: Micro, Nano, Full-size",
                    "–°–µ–Ω—Å–æ—Ä: CCD –∏–ª–∏ CMOS",
                ],
            },
            "–í–∏–¥–µ–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫ (VTX)": {
                "description": "–ü–µ—Ä–µ–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å–∏–≥–Ω–∞–ª —Å –∫–∞–º–µ—Ä—ã –Ω–∞ —à–ª–µ–º –ø–∏–ª–æ—Ç–∞",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ VTX ‚îÇ
          ‚îÇ üì° ‚îÇ
          ‚îÇ ‚ö°‚ö°‚ö°‚ö° ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         –í–∏–¥–µ–æ–ø–µ—Ä–µ–¥–∞—Ç—á–∏–∫
                """,
                "function": "–ü–µ—Ä–µ–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å–∏–≥–Ω–∞–ª —Å –∫–∞–º–µ—Ä—ã –Ω–∞ FPV —à–ª–µ–º –Ω–∞ —á–∞—Å—Ç–æ—Ç–µ 5.8GHz.",
                "facts": [
                    "–ú–æ—â–Ω–æ—Å—Ç—å: 25mW, 200mW, 800mW, 1W+",
                    "–ß–∞—Å—Ç–æ—Ç—ã: 5.8GHz –∫–∞–Ω–∞–ª—ã",
                    "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã: Analog, HDZero, Walksnail, DJI",
                    "–ê–Ω—Ç–µ–Ω–Ω—ã: –ª–∏–Ω–µ–π–Ω–∞—è, –∫—Ä—É–≥–æ–≤–∞—è –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è",
                ],
            },
            "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä (LiPo)": {
                "description": "–õ–∏—Ç–∏–π-–ø–æ–ª–∏–º–µ—Ä–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä, –ø–∏—Ç–∞—é—â–∏–π –¥—Ä–æ–Ω",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ LiPo ‚îÇ
          ‚îÇ ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚îÇ
          ‚îÇ ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          4S 1500mAh
                """,
                "function": "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–∏—Ç–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –¥—Ä–æ–Ω–∞. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–∞ –∏ –º–æ—â–Ω–æ—Å—Ç—å.",
                "facts": [
                    "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 1S, 2S, 3S, 4S, 6S (1S=3.7V)",
                    "–ï–º–∫–æ—Å—Ç—å: mAh (–º–∏–ª–ª–∏–∞–º–ø–µ—Ä-—á–∞—Å—ã)",
                    "–†–∞–∑—Ä—è–¥: C-—Ä–µ–π—Ç–∏–Ω–≥ (50C, 100C, 150C)",
                    "–ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —è—á–µ–µ–∫ –≤–∞–∂–Ω–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç–∏",
                ],
            },
            "–ü—Ä–∏–µ–º–Ω–∏–∫ (RX)": {
                "description": "–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª —Å –ø—É–ª—å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –Ω–∞ –ø–æ–ª–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ RX ‚îÇ
          ‚îÇ üì∂ ‚îÇ
          ‚îÇ ‚ö° ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          –ü—Ä–∏–µ–º–Ω–∏–∫ 2.4GHz
                """,
                "function": "–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å –ø—É–ª—å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –Ω–∞ –ø–æ–ª–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä.",
                "facts": [
                    "–ü—Ä–æ—Ç–æ–∫–æ–ª—ã: FrSky, Crossfire, ELRS, TBS",
                    "–ß–∞—Å—Ç–æ—Ç—ã: 2.4GHz, 900MHz, 5.8GHz",
                    "–ê–Ω—Ç–µ–Ω–Ω—ã: –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ, –≤–Ω–µ—à–Ω–∏–µ, —Ä–∞–∑–Ω–æ–ø–æ–ª—è—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ",
                    "–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                ],
            },
            "–ê–Ω—Ç–µ–Ω–Ω–∞": {
                "description": "–ü–µ—Ä–µ–¥–∞–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –º–µ–∂–¥—É –¥—Ä–æ–Ω–æ–º –∏ –ø—É–ª—å—Ç–æ–º/—à–ª–µ–º–æ–º",
                "image": """
            /\\
           / \\
          / \\
         /------\\
          –ê–Ω—Ç–µ–Ω–Ω–∞
                """,
                "function": "–£—Å–∏–ª–∏–≤–∞–µ—Ç –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–∏–µ–º–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∏.",
                "facts": [
                    "–¢–∏–ø—ã: –ª–∏–Ω–µ–π–Ω–∞—è, –∫—Ä—É–≥–æ–≤–∞—è –ø–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è",
                    "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –≤ dBi",
                    "–î–∏–∞–≥—Ä–∞–º–º–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–æ–Ω—É –ø–æ–∫—Ä—ã—Ç–∏—è",
                    "–ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–∏ –Ω–∞–∫–ª–æ–Ω–∞—Ö",
                ],
            },
            "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø–æ–ª–µ—Ç–∞ GPS": {
                "description": "–ú–æ–¥—É–ª—å GPS –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏",
                "image": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ GPS ‚îÇ
          ‚îÇ üõ∞Ô∏è ‚îÇ
          ‚îÇ ‚ö°‚ö° ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          GPS –º–æ–¥—É–ª—å
                """,
                "function": "–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä–æ–Ω–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ä–µ–∂–∏–º—ã.",
                "facts": [
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç GPS, GLONASS, Galileo",
                    "–¢–æ—á–Ω–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: 1-2 –º–µ—Ç—Ä–∞",
                    "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Return-to-Home",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å",
                ],
            },
        }

        # --- –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥—Ä–æ–Ω–æ–≤ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        self.drones = {
            "DJI FPV": {
                "type": "–ì–æ—Ç–æ–≤—ã–π –¥—Ä–æ–Ω",
                "description": "–ì–æ—Ç–æ–≤—ã–π FPV –¥—Ä–æ–Ω –æ—Ç DJI —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π",
                "features": [
                    "4K –∫–∞–º–µ—Ä–∞",
                    "–¶–∏—Ñ—Ä–æ–≤–∞—è FPV —Å–∏—Å—Ç–µ–º–∞",
                    "GPS",
                    "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –ø–æ–ª–µ—Ç–∞",
                ],
                "image": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ___ ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ \\___/ ‚îÇ
              ‚îÇ / | | \\ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                DJI FPV
                """,
                "function": "–ì–æ—Ç–æ–≤—ã–π –∫ –ø–æ–ª–µ—Ç–∞–º –¥—Ä–æ–Ω —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π FPV —Å–∏—Å—Ç–µ–º–æ–π, –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö.",
            },
            "iFlight Nazgul5": {
                "type": '–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä 5"',
                "description": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–π BNF (Bind-N-Fly) –¥—Ä–æ–Ω –¥–ª—è –≥–æ–Ω–æ–∫",
                "features": [
                    "–ö–∞—Ä–±–æ–Ω–æ–≤–∞—è —Ä–∞–º–∞",
                    "–ë–µ—Å–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–Ω—ã–µ –º–æ—Ç–æ—Ä—ã",
                    "–ê–Ω–∞–ª–æ–≥–æ–≤–∞—è FPV —Å–∏—Å—Ç–µ–º–∞",
                ],
                "image": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ X ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ \\___/ ‚îÇ
              ‚îÇ / | | \\ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              iFlight Nazgul5
                """,
                "function": "–î—Ä–æ–Ω –¥–ª—è –≥–æ–Ω–æ–∫ —Å –æ—Ç–ª–∏—á–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞, —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –ø—É–ª—å—Ç–∞.",
            },
            "Tiny Whoop": {
                "type": "–ú–∏–Ω–∏ –¥—Ä–æ–Ω",
                "description": "–ú–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä–æ–Ω –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏",
                "features": ["–ó–∞—â–∏—Ç–Ω—ã–π –¥—É–≥", "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä", "–ë–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –¥–æ–º–∞"],
                "image": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ()() ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ \\____/ ‚îÇ
              ‚îÇ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              Tiny Whoop
                """,
                "function": "–ú–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–π –¥—Ä–æ–Ω –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤ –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏, –±–µ–∑–æ–ø–∞—Å–µ–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞—â–∏—Ç–Ω–æ–º—É –¥—É–≥—É.",
            },
            "Cinewhoop": {
                "type": "–ö–∏–Ω–æ—Å—ä–µ–º–æ—á–Ω—ã–π –¥—Ä–æ–Ω",
                "description": "–î—Ä–æ–Ω –¥–ª—è –∞—ç—Ä–æ—Å—ä–µ–º–∫–∏ —Å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø–µ–ª–ª–µ—Ä–∞–º–∏",
                "features": ["–ó–∞—â–∏—Ç–Ω—ã–µ –∫–æ–ª—å—Ü–∞", "–ü–ª–∞–≤–Ω—ã–π –ø–æ–ª–µ—Ç", "–ö–∞–º–µ—Ä–∞ –Ω–∞ –ø–æ–¥–≤–µ—Å–µ"],
                "image": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ [][] ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ \\____/ ‚îÇ
              ‚îÇ [][] ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                Cinewhoop
                """,
                "function": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥—Ä–æ–Ω –¥–ª—è –≤–∏–¥–µ–æ—Å—ä–µ–º–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –ø—Ä–æ–ø–µ–ª–ª–µ—Ä–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
            },
            "Long Range Drone": {
                "type": "–î—Ä–æ–Ω –¥–∞–ª—å–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
                "description": "–î—Ä–æ–Ω –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è",
                "features": ["–ë–æ–ª—å—à–∏–µ –ø—Ä–æ–ø–µ–ª–ª–µ—Ä—ã", "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–æ—Ç–æ—Ä—ã", "–°–∏—Å—Ç–µ–º–∞ GPS"],
                "image": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ___ ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ \\___/ ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              Long Range
                """,
                "function": "–î—Ä–æ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤ –Ω–∞ –±–æ–ª—å—à–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª–µ—Ç–∞.",
            },
        }

        # --- –ú–æ–¥–µ–ª–∏ –ø—É–ª—å—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        self.controllers = {
            "RadioMaster TX12": {
                "description": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –ø—É–ª—å—Ç —Å —Ü–≤–µ—Ç–Ω—ã–º –¥–∏—Å–ø–ª–µ–µ–º",
                "price_range": "$$",
                "features": ["Color LCD", "4-in-1 module", "EdgeTX"],
                "views": {
                    "front": """
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ RADIOMASTER TX12 ‚îÇ
        ‚îÇ ‚îÇ
        ‚îÇ ( ) ( ) ‚îÇ
        ‚îÇ / \\ / \\ ‚îÇ
        ‚îÇ ‚îÇ
        ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
        ‚îÇ ‚îÇ ‚îÇ ‚îÇ
        ‚îÇ ‚îÇ LCD 2.4" ‚îÇ ‚îÇ
        ‚îÇ ‚îÇ ‚îÇ ‚îÇ
        ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
        ‚îÇ ‚îÇ
        ‚îÇ [SWA] [SWB] [SWC] [SWD]‚îÇ
        ‚îÇ [SWE] [SWF] [SWG] [SWH]‚îÇ
        ‚îÇ ‚îÇ
        ‚îÇ [ ] [ ] [ ] [ ] [ ] ‚îÇ
        ‚îÇ ‚îÇ
        ‚îÇ [ ] [ ] ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    """,
                    "side": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ‚îÇ
              ‚îÇ ( ) ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ ‚îÇ
              ‚îÇ LCD ‚îÇ
              ‚îÇ ‚îÇ
              ‚îÇ[SWA] ‚îÇ
              ‚îÇ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           –ë–æ–∫–æ–≤–æ–π –≤–∏–¥ TX12
                    """,
                },
            },
            "TBS Tango 2": {
                "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ø—É–ª—å—Ç –¥–ª—è FPV",
                "price_range": "$$$",
                "features": ["Compact", "Hall gimbals", "Crossfire"],
                "views": {
                    "front": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ TBS TANGO 2 ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ ( ) ( ) ‚îÇ
          ‚îÇ / \\ / \\ ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
          ‚îÇ ‚îÇ LCD ‚îÇ ‚îÇ
          ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ [ ] [ ] [ ] ‚îÇ
          ‚îÇ ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    """,
                    "side": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ‚îÇ
              ‚îÇ ( ) ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ ‚îÇ
              ‚îÇ LCD ‚îÇ
              ‚îÇ ‚îÇ
              ‚îÇ [ ] ‚îÇ
              ‚îÇ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           –ë–æ–∫–æ–≤–æ–π –≤–∏–¥ Tango 2
                    """,
                },
            },
            "DJI FPV Remote Controller 2": {
                "description": "–ü—É–ª—å—Ç –¥–ª—è DJI FPV —Å–∏—Å—Ç–µ–º—ã",
                "price_range": "$$$$",
                "features": ["Low latency", "Ergonomic", "OcuSync"],
                "views": {
                    "front": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ DJI FPV RC2 ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
          ‚îÇ ‚îÇ ‚îÇ ‚îÇ
          ‚îÇ ‚îÇ LCD ‚îÇ ‚îÇ
          ‚îÇ ‚îÇ ‚îÇ ‚îÇ
          ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ ( ) ( ) ‚îÇ
          ‚îÇ / \\ / \\ ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ [ ] [ ] [ ] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    """,
                    "side": """
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ ‚îÇ
              ‚îÇ ( ) ‚îÇ
              ‚îÇ / \\ ‚îÇ
              ‚îÇ ‚îÇ
              ‚îÇ LCD ‚îÇ
              ‚îÇ ‚îÇ
              ‚îÇ [ ] ‚îÇ
              ‚îÇ ‚îÇ
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
           –ë–æ–∫–æ–≤–æ–π –≤–∏–¥ DJI RC2
                    """,
                },
            },
        }

        # --- –ú–æ–¥–µ–ª–∏ FPV —à–ª–µ–º–æ–≤ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
        self.goggles = {
            "DJI FPV Goggles 2": {
                "description": "–¶–∏—Ñ—Ä–æ–≤–æ–π —à–ª–µ–º –æ—Ç DJI",
                "price_range": "$$$$",
                "features": ["Digital HD", "Low latency", "OcuSync"],
                "views": {
                    "front": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ DJI GOGGLES 2 ‚îÇ
          ‚îÇ ####### ##### ‚îÇ
          ‚îÇ # ## #‚îÇ
          ‚îÇ # # üñ• #‚îÇ
          ‚îÇ # ## #‚îÇ
          ‚îÇ ####### ##### ‚îÇ
          ‚îÇ ‚îÇ ‚îÇ ‚îÇ
          ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
          ‚îÇ [ANT] [PWR] [‚öô] ‚îÇ
          ‚îÇ [CH-] [CH+] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    """,
                    "side": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ _____ ‚îÇ
          ‚îÇ / \\ ‚îÇ
          ‚îÇ / üñ• \\ ‚îÇ
          ‚îÇ \\ / ‚îÇ
          ‚îÇ \\_____/ ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ [–†–ï–ì–£–õ–ò–†] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          –ë–æ–∫–æ–≤–æ–π –≤–∏–¥ DJI Goggles 2
                    """,
                },
            },
            "FatShark Dominator": {
                "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥–æ–≤—ã–π —à–ª–µ–º",
                "price_range": "$$$",
                "features": ["Analog", "Modular", "Lightweight"],
                "views": {
                    "front": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ FATSHARK DOMIN. ‚îÇ
          ‚îÇ #### #### ‚îÇ
          ‚îÇ # # # # ‚îÇ
          ‚îÇ # # # # ‚îÇ
          ‚îÇ #### #### ‚îÇ
          ‚îÇ ‚îÇ ‚îÇ ‚îÇ
          ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
          ‚îÇ [ ] [PWR] [‚öô] ‚îÇ
          ‚îÇ [CH-] [CH+] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    """,
                    "side": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ _____ ‚îÇ
          ‚îÇ / \\ ‚îÇ
          ‚îÇ / üëÅ \\ ‚îÇ
          ‚îÇ \\ / ‚îÇ
          ‚îÇ \\_____/ ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ [–§–û–ö–£–°] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          –ë–æ–∫–æ–≤–æ–π –≤–∏–¥ FatShark
                    """,
                },
            },
            "Skyzone Sky04X": {
                "description": "–®–ª–µ–º —Å OLED –¥–∏—Å–ø–ª–µ—è–º–∏",
                "price_range": "$$$$",
                "features": ["OLED", "Diversity", "HDMI"],
                "views": {
                    "front": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ SKYZONE SKY04X ‚îÇ
          ‚îÇ ##### ##### ‚îÇ
          ‚îÇ # ## # ‚îÇ
          ‚îÇ # # üñ• # ‚îÇ
          ‚îÇ # ## # ‚îÇ
          ‚îÇ ##### ##### ‚îÇ
          ‚îÇ ‚îÇ ‚îÇ ‚îÇ
          ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
          ‚îÇ [ANT] [PWR] [‚öô] ‚îÇ
          ‚îÇ [CH-] [CH+] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                    """,
                    "side": """
          ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
          ‚îÇ _____ ‚îÇ
          ‚îÇ / \\ ‚îÇ
          ‚îÇ / üñ• \\ ‚îÇ
          ‚îÇ \\ / ‚îÇ
          ‚îÇ \\_____/ ‚îÇ
          ‚îÇ ‚îÇ
          ‚îÇ [–î–ò–û–ü–¢–†] ‚îÇ
          ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
          –ë–æ–∫–æ–≤–æ–π –≤–∏–¥ Skyzone
                    """,
                },
            },
        }

    def show_menu(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
        menu_html = f"""
        <html>
        <head>
            <title>üéØ FPV –î–†–û–ù–´: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –û–±—É—á–µ–Ω–∏–µ</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                h1 {{ color: #2c3e50; text-align: center; }}
                .menu-item {{ margin: 10px 0; padding: 10px; background-color: #3498db; color: white; text-decoration: none; display: block; text-align: center; border-radius: 5px; }}
                .menu-item:hover {{ background-color: #2980b9; }}
                .stats {{ margin-top: 20px; padding: 10px; background-color: #ecf0f1; border-radius: 5px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéØ FPV –î–†–û–ù–´: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∏ –û–±—É—á–µ–Ω–∏–µ üéØ</h1>
                <a href="/quiz_components" class="menu-item">1 - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –£–≥–∞–¥–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</a>
                <a href="/quiz_drones" class="menu-item">2 - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –£–≥–∞–¥–∞–π –¥—Ä–æ–Ω</a>
                <a href="/learning_components" class="menu-item">3 - –û–±—É—á–∞–ª–∫–∞: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã FPV –¥—Ä–æ–Ω–∞</a>
                <a href="/show_controllers" class="menu-item">4 - –û—Å–º–æ—Ç—Ä–µ—Ç—å FPV –ø—É–ª—å—Ç—ã</a>
                <a href="/show_goggles" class="menu-item">5 - –û—Å–º–æ—Ç—Ä–µ—Ç—å FPV —à–ª–µ–º—ã</a>
                <a href="/data_transfer" class="menu-item">6 - –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω</a>
                <a href="/stats" class="menu-item">7 - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                <div class="stats">
                    <p><strong>–°—á–µ—Ç:</strong> {self.score}</p>
                    <p><strong>–û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</strong> {self.questions_answered}</p>
                    <p><strong>–ò–∑—É—á–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</strong> {len(self.components_learned)}/{len(self.components)}</p>
                </div>
            </div>
        </body>
        </html>
        """
        return menu_html

    def quiz_components(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        components = list(self.components.keys())
        random.shuffle(components)
        num_questions = random.randint(3, min(8, len(components)))

        questions_html = ""
        for i, component in enumerate(components[:num_questions], 1):
            question_type = random.choice(["description", "function", "fact"])
            if question_type == "description":
                text = self.components[component]["description"]
            elif question_type == "function":
                text = self.components[component]["function"]
            else:
                text = random.choice(self.components[component]["facts"])

            options = [component]
            wrong_options = [c for c in components if c != component]
            random.shuffle(wrong_options)
            num_options = random.randint(3, 5)
            options.extend(wrong_options[: num_options - 1])
            random.shuffle(options)

            options_html = ""
            for j, opt in enumerate(options, 1):
                options_html += f'<input type="radio" name="q{i}" value="{opt}" required> {opt}<br>'

            questions_html += f"""
            <div style="margin-bottom: 20px;">
                <h3>–í–æ–ø—Ä–æ—Å {i}/{num_questions}</h3>
                <p><strong>{question_type.upper()}:</strong> {text}</p>
                <div>
                    {options_html}
                </div>
            </div>
            """

        quiz_html = f"""
        <html>
        <head>
            <title>üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –£–≥–∞–¥–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back {{ margin-top: 20px; }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –£–≥–∞–¥–∞–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥—Ä–æ–Ω–∞</h1>
                <form method="POST">
                    {questions_html}
                    <input type="hidden" name="num_questions" value="{num_questions}">
                    <input type="hidden" name="components" value="{'|'.join(components[:num_questions])}">
                    <input type="submit" value="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã">
                </form>
                <div class="back"><a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a></div>
            </div>
        </body>
        </html>
        """
        return quiz_html

    def handle_quiz_components_submit(self, form_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        num_questions = int(form_data.get('num_questions', 0))
        components_str = form_data.get('components', '')
        submitted_components = components_str.split('|')

        score_increment = 0
        results_html = "<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:</h2>"
        for i in range(1, num_questions + 1):
            user_answer = form_data.get(f'q{i}')
            correct_answer = submitted_components[i - 1]

            if user_answer == correct_answer:
                result = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!"
                score_increment += 10
                self.components_learned.add(correct_answer)
            else:
                result = f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

            self.questions_answered += 1

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            comp_info = self.components[correct_answer]
            results_html += f"""
            <div style="margin-bottom: 20px;">
                <p>{result}</p>
                <pre>{comp_info['image']}</pre>
                <p><strong>–§—É–Ω–∫—Ü–∏—è:</strong> {comp_info['function']}</p>
                <p><strong>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</strong> {random.choice(comp_info['facts'])}</p>
            </div>
            """

        self.score += score_increment
        results_html += f"<p><strong>–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥:</strong> {score_increment}</p>"

        results_page = f"""
        <html>
        <head>
            <title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã</h1>
                {results_html}
                <p><a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a></p>
            </div>
        </body>
        </html>
        """
        return results_page

    # --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥—Ä–æ–Ω–æ–≤ ---
    def quiz_drones(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π –¥—Ä–æ–Ω–æ–≤"""
        drones = list(self.drones.keys())
        random.shuffle(drones)
        num_questions = random.randint(2, min(4, len(drones)))

        questions_html = ""
        for i, drone in enumerate(drones[:num_questions], 1):
            drone_info = self.drones[drone]
            question_type = random.choice(["type", "features", "description"])
            if question_type == "type":
                text = drone_info["type"]
            elif question_type == "features":
                features = random.sample(drone_info["features"], min(2, len(drone_info["features"])))
                text = ", ".join(features)
            else:
                text = drone_info["description"]

            options = [drone]
            wrong_options = [d for d in drones if d != drone]
            random.shuffle(wrong_options)
            options.extend(wrong_options[:2])
            random.shuffle(options)

            options_html = ""
            for j, opt in enumerate(options, 1):
                options_html += f'<input type="radio" name="q{i}" value="{opt}" required> {opt}<br>'

            questions_html += f"""
            <div style="margin-bottom: 20px;">
                <h3>–í–æ–ø—Ä–æ—Å {i}/{num_questions}</h3>
                <p><strong>{question_type.upper()}:</strong> {text}</p>
                <div>
                    {options_html}
                </div>
            </div>
            """

        quiz_html = f"""
        <html>
        <head>
            <title>üöÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –£–≥–∞–¥–∞–π –¥—Ä–æ–Ω</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back {{ margin-top: 20px; }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: –£–≥–∞–¥–∞–π –¥—Ä–æ–Ω</h1>
                <form method="POST">
                    {questions_html}
                    <input type="hidden" name="num_questions" value="{num_questions}">
                    <input type="hidden" name="drones" value="{'|'.join(drones[:num_questions])}">
                    <input type="submit" value="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã">
                </form>
                <div class="back"><a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a></div>
            </div>
        </body>
        </html>
        """
        return quiz_html

    def handle_quiz_drones_submit(self, form_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥—Ä–æ–Ω–æ–≤"""
        num_questions = int(form_data.get('num_questions', 0))
        drones_str = form_data.get('drones', '')
        submitted_drones = drones_str.split('|')

        score_increment = 0
        results_html = "<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥—Ä–æ–Ω–æ–≤:</h2>"
        for i in range(1, num_questions + 1):
            user_answer = form_data.get(f'q{i}')
            correct_answer = submitted_drones[i - 1]

            if user_answer == correct_answer:
                result = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û!"
                score_increment += 15
            else:
                result = f"‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"

            self.questions_answered += 1

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä–æ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            drone_info = self.drones[correct_answer]
            results_html += f"""
            <div style="margin-bottom: 20px;">
                <p>{result}</p>
                <pre>{drone_info['image']}</pre>
                <p><strong>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</strong> {drone_info['function']}</p>
            </div>
            """

        self.score += score_increment
        results_html += f"<p><strong>–ü–æ–ª—É—á–µ–Ω–æ –æ—á–∫–æ–≤ –∑–∞ —Ä–∞—É–Ω–¥:</strong> {score_increment}</p>"

        results_page = f"""
        <html>
        <head>
            <title>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥—Ä–æ–Ω–æ–≤</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥—Ä–æ–Ω–æ–≤</h1>
                {results_html}
                <p><a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a></p>
            </div>
        </body>
        </html>
        """
        return results_page

    # --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –û–±—É—á–∞–ª–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ---
    def learning_components(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ–±—É—á–∞–ª–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        components = list(self.components.keys())
        random.shuffle(components) # –†–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫

        components_html = ""
        for i, component in enumerate(components, 1):
            learned = "‚úÖ" if component in self.components_learned else " "
            components_html += f'<a href="/learning_component/{component}" class="menu-item">{learned} {component}</a>\n'

        learning_page = f"""
        <html>
        <head>
            <title>üìö –û–±—É—á–∞–ª–∫–∞: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã FPV –¥—Ä–æ–Ω–∞</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .menu-item {{ margin: 10px 0; padding: 10px; background-color: #3498db; color: white; text-decoration: none; display: block; text-align: center; border-radius: 5px; }}
                .menu-item:hover {{ background-color: #2980b9; }}
                .back {{ margin-top: 20px; }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìö –û–±—É—á–∞–ª–∫–∞: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã FPV –¥—Ä–æ–Ω–∞</h1>
                {components_html}
                <div class="back"><a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a></div>
            </div>
        </body>
        </html>
        """
        return learning_page

    def show_component_info(self, component_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"""
        if component_name not in self.components:
            return "<h1>–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><a href='/'>‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>"

        info = self.components[component_name]
        self.components_learned.add(component_name) # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ

        component_page = f"""
        <html>
        <head>
            <title>üîß {component_name.upper()}</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üîß {component_name.upper()}</h1>
                <pre>{info['image']}</pre>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {info['description']}</p>
                <p><strong>–§—É–Ω–∫—Ü–∏—è:</strong> {info['function']}</p>
                <p><strong>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã:</strong></p>
                <ul>
        """
        for fact in info['facts']:
            component_page += f"<li>{fact}</li>"
        component_page += """
                </ul>
                <a href="/learning_components">‚Üê –ù–∞–∑–∞–¥ –∫ –æ–±—É—á–∞–ª–∫–µ</a> | <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return component_page

    # --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü–æ–∫–∞–∑ –ø—É–ª—å—Ç–æ–≤ ---
    def show_controllers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –ø—É–ª—å—Ç–æ–≤"""
        controllers = list(self.controllers.keys())

        controllers_html = ""
        for controller in controllers:
            controllers_html += f'<a href="/show_controller/{controller}" class="menu-item">{controller}</a>\n'

        controller_page = f"""
        <html>
        <head>
            <title>üéÆ –ö–æ–ª–ª–µ–∫—Ü–∏—è FPV –ø—É–ª—å—Ç–æ–≤</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .menu-item {{ margin: 10px 0; padding: 10px; background-color: #3498db; color: white; text-decoration: none; display: block; text-align: center; border-radius: 5px; }}
                .menu-item:hover {{ background-color: #2980b9; }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéÆ –ö–æ–ª–ª–µ–∫—Ü–∏—è FPV –ø—É–ª—å—Ç–æ–≤</h1>
                {controllers_html}
                <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return controller_page

    def show_controller_details(self, controller_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø—É–ª—å—Ç–∞"""
        if controller_name not in self.controllers:
            return "<h1>–ü—É–ª—å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><a href='/'>‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>"

        info = self.controllers[controller_name]

        controller_details_page = f"""
        <html>
        <head>
            <title>üéÆ {controller_name.upper()}</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üéÆ {controller_name.upper()}</h1>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {info['description']}</p>
                <p><strong>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</strong> {info['price_range']}</p>
                <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> {', '.join(info['features'])}</p>
                <h3>–í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏:</h3>
                <pre>{info['views']['front']}</pre>
                <h3>–í–∏–¥ —Å–±–æ–∫—É:</h3>
                <pre>{info['views']['side']}</pre>
                <a href="/show_controllers">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</a> | <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return controller_details_page

    # --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü–æ–∫–∞–∑ —à–ª–µ–º–æ–≤ ---
    def show_goggles(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —à–ª–µ–º–æ–≤"""
        goggles = list(self.goggles.keys())

        goggles_html = ""
        for goggle in goggles:
            goggles_html += f'<a href="/show_goggle/{goggle}" class="menu-item">{goggle}</a>\n'

        goggles_page = f"""
        <html>
        <head>
            <title>ü•Ω –ö–æ–ª–ª–µ–∫—Ü–∏—è FPV —à–ª–µ–º–æ–≤</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .menu-item {{ margin: 10px 0; padding: 10px; background-color: #3498db; color: white; text-decoration: none; display: block; text-align: center; border-radius: 5px; }}
                .menu-item:hover {{ background-color: #2980b9; }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü•Ω –ö–æ–ª–ª–µ–∫—Ü–∏—è FPV —à–ª–µ–º–æ–≤</h1>
                {goggles_html}
                <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return goggles_page

    def show_goggle_details(self, goggle_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —à–ª–µ–º–∞"""
        if goggle_name not in self.goggles:
            return "<h1>–®–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω</h1><a href='/'>‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>"

        info = self.goggles[goggle_name]

        goggle_details_page = f"""
        <html>
        <head>
            <title>ü•Ω {goggle_name.upper()}</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü•Ω {goggle_name.upper()}</h1>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {info['description']}</p>
                <p><strong>–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</strong> {info['price_range']}</p>
                <p><strong>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</strong> {', '.join(info['features'])}</p>
                <h3>–í–∏–¥ —Å–ø–µ—Ä–µ–¥–∏:</h3>
                <pre>{info['views']['front']}</pre>
                <h3>–í–∏–¥ —Å–±–æ–∫—É:</h3>
                <pre>{info['views']['side']}</pre>
                <a href="/show_goggles">‚Üê –ù–∞–∑–∞–¥ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</a> | <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return goggle_details_page

    # --- –ù–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö ---
    def data_transfer(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.components_learned:
            transfer_page = f"""
            <html>
            <body>
                <h1>üì° –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö</h1>
                <p>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!</p>
                <p>–°–Ω–∞—á–∞–ª–∞ –∏–∑—É—á–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –æ–±—É—á–∞–ª–∫–µ –∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ.</p>
                <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </body>
            </html>
            """
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∏
            components_str = ",".join(sorted(self.components_learned))
            self.transfer_code = f"FPV{self.score:04d}{len(self.components_learned):02d}"

            transfer_page = f"""
            <html>
            <head>
                <title>üì° –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö</title>
                <style>
                    body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                    .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                    .back a {{ color: #3498db; text-decoration: none; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>üì° –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö</h1>
                    <p><strong>–í–∞—à —Å—á–µ—Ç:</strong> {self.score}</p>
                    <p><strong>–ò–∑—É—á–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</strong> {len(self.components_learned)}</p>
                    <p><strong>–ö–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∏:</strong> <code>{self.transfer_code}</code></p>
                    <h3>–ö–ê–ö –ü–ï–†–ï–î–ê–¢–¨ –î–ê–ù–ù–´–ï:</h3>
                    <ol>
                        <li>–ó–∞–ø–æ–º–Ω–∏—Ç–µ –∫–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∏ –≤—ã—à–µ</li>
                        <li>–ù–∞ –¥—Ä—É–≥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É</li>
                        <li>–í—ã–±–µ—Ä–∏—Ç–µ '–ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö' -> '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'</li>
                        <li>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∏</li>
                    </ol>
                    <h3>–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–¥—É</h3>
                    <form method="POST" action="/receive_data">
                        <input type="text" name="code" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–µ—Ä–µ–¥–∞—á–∏" required>
                        <input type="submit" value="–ü–æ–ª—É—á–∏—Ç—å">
                    </form>
                    <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
                </div>
            </body>
            </html>
            """
        return transfer_page

    def receive_data(self, form_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–¥—É"""
        code = form_data.get('code', '').strip().upper()

        if len(code) != 9 or not code.startswith("FPV"):
            result_message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!"
        else:
            try:
                score = int(code[3:7])
                components_count = int(code[7:9])

                result_message = f"""
                ‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!<br>
                üèÜ –°—á–µ—Ç –¥—Ä—É–≥–∞: {score}<br>
                üìö –ò–∑—É—á–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {components_count}
                """
                if score > self.score:
                    result_message += "<br>üéØ –í–∞—à –¥—Ä—É–≥ –∑–Ω–∞–µ—Ç –±–æ–ª—å—à–µ –≤–∞—Å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è!"
                else:
                    result_message += "<br>‚≠ê –í—ã –∑–Ω–∞–µ—Ç–µ –±–æ–ª—å—à–µ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"

                # "–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º" –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                available_components = [
                    c for c in self.components.keys() if c not in self.components_learned
                ]
                if available_components:
                    imported = random.sample(
                        available_components, min(2, len(available_components))
                    )
                    for comp in imported:
                        self.components_learned.add(comp)
                    result_message += f"<br>üìñ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {', '.join(imported)}"

            except ValueError:
                result_message = "‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ –ø–µ—Ä–µ–¥–∞—á–∏!"

        receive_result_page = f"""
        <html>
        <head>
            <title>üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üì• –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö</h1>
                <p>{result_message}</p>
                <a href="/data_transfer">‚Üê –ù–∞–∑–∞–¥ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö</a> | <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return receive_result_page


    def show_stats(self):
        progress = len(self.components_learned) / len(self.components) * 100
        if progress < 25:
            status = "–ù–∞—á–∏–Ω–∞—é—â–∏–π –ø–∏–ª–æ—Ç"
        elif progress < 50:
            status = "–õ—é–±–∏—Ç–µ–ª—å FPV"
        elif progress < 75:
            status = "–û–ø—ã—Ç–Ω—ã–π –ø–∏–ª–æ—Ç"
        else:
            status = "FPV –≠–∫—Å–ø–µ—Ä—Ç!"

        stats_html = f"""
        <html>
        <head>
            <title>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</title>
            <style>
                body {{ font-family: Arial, sans-serif; background-color: #f0f0f0; margin: 0; padding: 20px; }}
                .container {{ max-width: 800px; margin: auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .back a {{ color: #3498db; text-decoration: none; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
                <p><strong>–û–±—â–∏–π —Å—á–µ—Ç:</strong> {self.score}</p>
                <p><strong>–û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</strong> {self.questions_answered}</p>
                <p><strong>–ò–∑—É—á–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:</strong> {len(self.components_learned)}/{len(self.components)}</p>
                <p><strong>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è:</strong> {progress:.1f}%</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {status}</p>
                <a href="/">‚Üê –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é</a>
            </div>
        </body>
        </html>
        """
        return stats_html

# --- –°–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω—É–∂–Ω–∞ —Å–µ—Å—Å–∏—è)
game_instance = FPVQuizGame()

@app.route('/')
def index():
    return game_instance.show_menu()

@app.route('/quiz_components')
def quiz_components_page():
    return game_instance.quiz_components()

@app.route('/quiz_components', methods=['POST'])
def quiz_components_submit():
    return game_instance.handle_quiz_components_submit(request.form)

# --- –ù–û–í–´–ï –ú–ê–†–®–†–£–¢–´ ---
@app.route('/quiz_drones')
def quiz_drones_page():
    return game_instance.quiz_drones()

@app.route('/quiz_drones', methods=['POST'])
def quiz_drones_submit():
    return game_instance.handle_quiz_drones_submit(request.form)

@app.route('/learning_components')
def learning_components_page():
    return game_instance.learning_components()

@app.route('/learning_component/<component_name>')
def show_component_detail(component_name):
    return game_instance.show_component_info(component_name)

@app.route('/show_controllers')
def show_controllers_page():
    return game_instance.show_controllers()

@app.route('/show_controller/<controller_name>')
def show_controller_detail(controller_name):
    return game_instance.show_controller_details(controller_name)

@app.route('/show_goggles')
def show_goggles_page():
    return game_instance.show_goggles()

@app.route('/show_goggle/<goggle_name>')
def show_goggle_detail(goggle_name):
    return game_instance.show_goggle_details(goggle_name)

@app.route('/data_transfer')
def data_transfer_page():
    return game_instance.data_transfer()

@app.route('/receive_data', methods=['POST'])
def receive_data_submit():
    return game_instance.receive_data(request.form)

@app.route('/stats')
def stats_page():
    return game_instance.show_stats()

if __name__ == "__main__":
    # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
